"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[878],{7940:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>r,toc:()=>c});var s=n(4848),i=n(8453);const a={sidebar_position:5},o="Faults",r={id:"design/faults",title:"Faults",description:"Please refer to Overview for an introduction.",source:"@site/docs/design/faults.md",sourceDirName:"design",slug:"/design/faults",permalink:"/design/faults",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"sidebar",previous:{title:"Operator Set Tracking",permalink:"/design/operator_set_tracking"},next:{title:"Incentives",permalink:"/design/incentives"}},l={},c=[{value:"Classification",id:"classification",level:2},{value:"Safety Faults",id:"safety-faults",level:3},{value:"Liveness Faults",id:"liveness-faults",level:3},{value:"Challenging",id:"challenging",level:2},{value:"Checkpoint Task",id:"checkpoint-task",level:3},{value:"Messages",id:"messages",level:3},{value:"Operator Set Updates",id:"operator-set-updates",level:4},{value:"State Root Updates",id:"state-root-updates",level:4},{value:"Slashing",id:"slashing",level:2}];function h(e){const t={a:"a",admonition:"admonition",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"faults",children:"Faults"}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:["Please refer to ",(0,s.jsx)(t.a,{href:"/design/overview",children:"Overview"})," for an introduction."]})}),"\n",(0,s.jsx)(t.h2,{id:"classification",children:"Classification"}),"\n",(0,s.jsxs)(t.p,{children:["There are two main AVS faults: ",(0,s.jsx)(t.em,{children:"Safety Faults"})," and ",(0,s.jsx)(t.em,{children:"Liveness Faults"}),". None are\nimplemented yet."]}),"\n",(0,s.jsx)(t.h3,{id:"safety-faults",children:"Safety Faults"}),"\n",(0,s.jsxs)(t.p,{children:["Safety faults affect the integrity of the network, leading to incorrect states\nor outcomes that are not consistent with the system's rules. An AVS operator\ncan violate the network rules by two means - ",(0,s.jsx)(t.em,{children:"Equivocation"})," and\n",(0,s.jsx)(t.em,{children:"Invalid Attestation"}),"."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Equivocation: When a node signs more than one message for the same case -\ne.g. in terms of state root updates, more than one state root for the same\nnetwork and block or more than one timestamp for the same block."}),"\n",(0,s.jsx)(t.li,{children:"Invalid Attestation: When a node attests on a fact that is provably wrong -\ne.g. in the case of operator set updates, if the update ID does not match the\ndelta based on the contracts, it's simply wrong. The same applies to state\nroot updates, but through state root verifications, and also to checkpoint\ntasks."}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"liveness-faults",children:"Liveness Faults"}),"\n",(0,s.jsx)(t.p,{children:"Liveness faults affect the availability and efficiency of the network, leading\nto delays or inability to perform transactions but not necessarily resulting\nin incorrect states."}),"\n",(0,s.jsx)(t.p,{children:"This is closely tied to the messaging flow. If an operator consistently\nabstains from participating in message signings, this can impact the network\navailability and attestation verification costs."}),"\n",(0,s.jsx)(t.h2,{id:"challenging",children:"Challenging"}),"\n",(0,s.jsx)(t.p,{children:"As there are multiple faults, the challenge process also slightly differs in\neach specific situation."}),"\n",(0,s.jsx)(t.h3,{id:"checkpoint-task",children:"Checkpoint Task"}),"\n",(0,s.jsx)(t.p,{children:"A checkpoint task response can be directly challenged if the message\nmerkleization is not correct - that is, either a message that should've been\npart of the checkpoint tree wasn't included, or, inversely, a message that\nshould not have been part of the checkpoint was included."}),"\n",(0,s.jsx)(t.p,{children:"In both cases, the evidence is a message. If the message includes a valid\nattestation and is included in the checkpoint timeframe, and there's also a\nvalid non-inclusion proof, the challenge is successful.\nSimilarly, if the message either includes an invalid attestation or is not\nincluded in the checkpoint timeframe, and there's a valid inclusion proof, the\nchallenge is successful."}),"\n",(0,s.jsxs)(t.p,{children:["As an experimental design, a checkpoint task can also be challenged if the tree\nwas not properly built. In this case, it would be mandatory that the checkpoint\ntrees are linked to a NEAR DA submission, and a challenger could create a ZK\nproof for the SMT resulting root. After going through a NEAR DA submission\nproving process, as seen in ",(0,s.jsx)(t.a,{href:"#state-root-updates",children:"State Root Updates"}),", the\nchallenger could then prove there was an issue with the checkpoint\nmerkleization."]}),"\n",(0,s.jsx)(t.h3,{id:"messages",children:"Messages"}),"\n",(0,s.jsx)(t.p,{children:"The first step to challenge any message is proving it's included in a\ncheckpoint. Consequently, messages are only challengeable after the checkpoint\nchallenge period. Also, in this stage, the challenge process is focused on the\nmessage content, not its inclusion, attestation or time period - all of those\nare already considered by the checkpoint task challenge."}),"\n",(0,s.jsx)(t.p,{children:"As such, a general message challenge includes, as evidence, a message and its\ninclusion proof in the checkpoint SMT. Then, each specific message will have\nits own flow."}),"\n",(0,s.jsx)(t.h4,{id:"operator-set-updates",children:"Operator Set Updates"}),"\n",(0,s.jsx)(t.p,{children:"An operator set update message is invalid when the operator set update delta\nfor a specific update ID either does not exist (the ID itself is invalid) or\nis wrong. This is directly done through the SFFL contracts, which include\nmethods for examining operator set updates individually, and does not require\nany extra parameters."}),"\n",(0,s.jsx)(t.h4,{id:"state-root-updates",children:"State Root Updates"}),"\n",(0,s.jsx)(t.p,{children:"Slightly differently, a state root update message is invalid when either the\nrelated network block is not available on the expected NEAR DA transaction or\nthe state root is wrong. The former works as a fast fault, whereas the latter\nworks as a slower, but stronger fault."}),"\n",(0,s.jsx)(t.p,{children:"In the case of the former, the challenge would include a NEAR DA submission\nproving process. It's, by itself, a challenge process, and is comprised of a\ncollateral-locking approach - a user locks a fixed collateral and starts the\nprocess, allowing anyone to submit a NEAR DA inclusion proof for that\ntransaction: a successful submission leads to rewarding the submitter with the\nlocked collateral, whereas a failure to submit an inclusion proof leads to the\ndata to be considered non-included, and the message challenge would be\nsuccessful."}),"\n",(0,s.jsxs)(t.p,{children:["The NEAR transaction inclusion proof for the DA submission is verified through\nthe Ethereum ",(0,s.jsx)(t.a,{href:"https://near.org/bridge",children:"Rainbow Bridge"})," contracts, and is a\ncostly process - it requires first updating the light client with the block in\nquestion and then verifying the proof."]}),"\n",(0,s.jsx)(t.p,{children:"Then, in terms of checking the state root itself, this would be\nnetwork-dependant and reliant on specific implementations. For Ethereum\nrollups, this would require waiting for the network's data to be posted on\nEthereum and then verifying a proof for the block data, showing the state root\ndiffers from the attested one."}),"\n",(0,s.jsx)(t.h2,{id:"slashing",children:"Slashing"}),"\n",(0,s.jsx)(t.p,{children:"The slashing design for EigenLayer is yet to be implemented. We are in touch\nwith the AVS team at EigenLayer to devise a solution."})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var s=n(6540);const i={},a=s.createContext(i);function o(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);